因为子线程无法用return语句返回数据，因此若在 sendRequestWithHttpURLConnection 内开启线程发起 HTTP 请求服务器响应数据无法返回，
所有耗时逻辑都在子线程里进行，sendRequestWithHttpURLConnection 方法会在服务器还没来得及响应时候就执行结束了。

使用 Java 回掉机制解决问题

HttpCallbackListener.java
        public interface HttpCallbackListener {
        void onFinish(String response);
        void onError(Exception e);
      }
      
HttpUtil.java
      public class HttpUtil {
    public static void sendRequestWithHttpURLConnection(final String address,final HttpCallbackListener listener){
        //方法内部开启子线程，在子线程里开启具体网络操作
        //子线程无法通过return语句返回数据，将响应数据传入HttpCallbackListener onFinish()方法中
        //出现异常则将异常原因传入onError()方法中
        new Thread(new Runnable() {
            @Override
            public void run() {
                HttpURLConnection connection = null;
                try {
                    URL url = new URL(address);
                    connection= (HttpURLConnection) url.openConnection();
                    connection.setRequestMethod("GET");
                    connection.setConnectTimeout(8000);
                    connection.setReadTimeout(8000);
                    InputStream in = connection.getInputStream();
                    BufferedReader reader = new BufferedReader(new InputStreamReader(in));
                    StringBuilder response = new StringBuilder();
                    String line;
                    while ((line=reader.readLine())!=null){
                        response.append(line);
                    }
                    if (listener!=null){
                        listener.onFinish(response.toString());
                    }
                } catch (Exception e){
                    if (listener!=null){
                        listener.onError(e);
                    }
                } finally {
                    if (connection!=null){
                        connection.disconnect();
                    }
                }
            }
        }).start();
    }

}

  MainActivity.java
        public class Mainactivity {
          ...
          public void sendRequestWithHttpURLConnection(){
                  new Thread(new Runnable(){
                      @Override
                      public void run() {
                          HttpUtil.sendRequestWithHttpURLConnection(REQUESTURL, new HttpCallbackListener() {
                              //onFinish()和onError()两个方法可以处理不同逻辑
                              @Override
                              public void onFinish(String response) {
                                  Message message = new Message();
                                  message.what = SHOW_RESPONSE;
                                  message.obj =  response;
                                  handler.sendMessage(message);
                              }

                              @Override
                              public void onError(Exception e) {
                                  Message message = new Message();
                                  message.what = SHOW_RESPONSE;
                                  message.obj =  e.toString();
                                  handler.sendMessage(message);
                              }
                          });
                      }
                  }).start();
             }
        }
